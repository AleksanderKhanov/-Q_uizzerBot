from aiogram import types, F
from aiogram.filters.command import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

from quiz_data import quiz_data
from database import save_result, get_result

user_state = {}  # user_id -> {'index': int, 'score': int}
bot = None  # –±—É–¥–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω –≤ register_handlers

# –ö–æ–º–∞–Ω–¥–∞ /start
async def cmd_start(message: types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è –∫–≤–∏–∑–∞. –í–≤–µ–¥–∏—Ç–µ /quiz, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.")

# –ö–æ–º–∞–Ω–¥–∞ /quiz
async def cmd_quiz(message: types.Message):
    user_id = message.from_user.id
    user_state[user_id] = {'index': 0, 'score': 0}
    await send_question(message.chat.id, user_id)

# –ö–æ–º–∞–Ω–¥–∞ /stats
async def cmd_stats(message: types.Message):
    user_id = message.from_user.id
    score = await get_result(user_id)
    if score is not None:
        await message.answer(f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} / {len(quiz_data)} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.")
    else:
        await message.answer("–í—ã –µ—â—ë –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ –∫–≤–∏–∑.")

# –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
async def send_question(chat_id, user_id):
    state = user_state.get(user_id, {'index': 0, 'score': 0})
    index = state['index']

    if index >= len(quiz_data):
        score = state['score']
        await save_result(user_id, score)
        await bot.send_message(chat_id, f"–ö–≤–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω! üéâ\n–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {score} / {len(quiz_data)}")
        user_state.pop(user_id, None)
        return

    question = quiz_data[index]
    text = f"{question['question']}\n\n" + "\n".join(
        [f"{i+1}. {opt}" for i, opt in enumerate(question['options'])]
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=opt, callback_data=f"answer:{i}")]
            for i, opt in enumerate(question['options'])
        ]
    )

    await bot.send_message(chat_id, text, reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
async def handle_answer(callback: CallbackQuery):
    user_id = callback.from_user.id
    state = user_state.get(user_id)

    if not state:
        await callback.answer("–ù–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Å –∫–æ–º–∞–Ω–¥—ã /quiz")
        return

    index = state['index']
    question = quiz_data[index]
    selected_option = int(callback.data.split(":")[1])
    selected_text = question["options"][selected_option]

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏
    if selected_option == question["correct_option"]:
        state['score'] += 1

    # –£–¥–∞–ª–∏–º –∫–Ω–æ–ø–∫–∏ –∏ –ø–æ–∫–∞–∂–µ–º –≤—ã–±–æ—Ä
    await callback.message.edit_reply_markup()
    await callback.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_text}")

    # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
    state['index'] += 1
    await send_question(callback.message.chat.id, user_id)

    await callback.answer()

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
def register_handlers(dp, bot_instance):
    global bot
    bot = bot_instance

    dp.message.register(cmd_start, Command("start"))
    dp.message.register(cmd_quiz, Command("quiz"))
    dp.message.register(cmd_stats, Command("stats"))  # ‚¨Ö –Ω–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞
    dp.callback_query.register(handle_answer, F.data.startswith("answer:"))